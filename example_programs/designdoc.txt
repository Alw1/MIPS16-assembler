
# Test program from the lab handout
#$v0 = 0040hex; // you can redefine $v0-3, $t0, and $a0-1 with
#$v1 = 1010hex; // your register numbers such as $1, $2, etc.
#$v2 = 000Fhex;
#$v3 = 00F0hex;
#$t0 = 0000hex;
#$a0 = 0010hex;
#$a1 = 0005hex;

#Step 1: store all numbers into memory

# 0x0040
addi $r1, $r1, 32
sll $r1, $r1, 1
NOP
NOP
NOP
sw $r1, 0($r0)
sub $r1, $r1, $r1

# 0x1010
addi $r1, $r1, 32
sll $r1, $r1, 7
addi $r1, $r1, 16
NOP
NOP
NOP
sw $r1, 1($r0)
sub $r1, $r1, $r1

# 0x000F
addi $r1, $r1, 15
NOP
NOP
NOP
sw $r1, 2($r0)
sub $r1, $r1, $r1

#0x00f0
addi $r1, $r1, 30
sll $r1, $r1, 3
NOP
NOP
NOP
sw $r1, 3($r0)
sub $r1, $r1, $r1


# 0x0000
sw $r0, 4($r0)

# 0x0010
addi $r1, $r1, 16
NOP
NOP
NOP
sw $r1, 5($r0)
sub $r1, $r1, $r1

# 0x0005
addi $r1, $r1, 5
NOP
NOP
NOP
sw $r1, 6($r0)

addi $r2, $r2, 16


# STEP 2: Load initial values into memory

# Mem[$r2] =   0x0101
# Mem[$r2+2] = 0x0110
# Mem[$r2+4] = 0x0011
# Mem[$r2+6] = 0x00F0
# Mem[$r2+8] = 0x00FF

# Mem[$r2] =   0x0101
addi $r3, $r3, 32
sll $r3, $r3, 3
addi $r3, $r3, 1
NOP
NOP
NOP
sw $r3, 0($r2)

# Mem[$r2+2] = 0x0110
addi $r3, $r3, 15
NOP
NOP
NOP
sw $r3, 1($r2)
sub $r3, $r3, $r3

# Mem[$r2+4] = 0x0011
addi $r3, $r3, 17
NOP
NOP
NOP
sw $r3, 2($r2)
sub $r3, $r3, $r3


# Mem[$r2+6] = 0x00F0
addi $r3, $r3, 60
sll $r3, $r3, 2
NOP
NOP
NOP
sw $r3, 3($r2)
sub $r3, $r3, $r3


# Mem[$r2+8] = 0x00FF
addi $r3, $r3, 60
sll $r3, $r3, 2
addi $r3, $r3, 15
NOP
NOP
NOP
sw $r3, 4($r2)
sub $r3, $r3, $r3

# r1 == a5 == loop count
# r2 == a0 == mem addr to pull from 
# everything else == temporary registers

loop: beq $r1, $r0, end

      addi $r1, $r1, -1
	  lw $r3, 0($r2)      

	# if ($r3 > 0x0100)
if:	  sub $r4, $r4, $r4  
	  addi $r4, $r4, 32
	  sll $r4, $r4, 3   
	  slt $r5, $r4, $r3	
	  NOP
	  NOP
	  NOP
	  beq $r4, $r3, else

	  sub $r7, $r7, $r7
	  sub $r5, $r5, $r5
	  addi $r5, $r5, 48
	  sll $r5, $r5, 4
	  addi $r7, $r7, 63
	  sll $r7, $r7, 10
	  add $r7, $r7, $r5
	  NOP
	  NOP
	  NOP
	  sw $r7, 0($r2)     #Mem = 0xFF00
		
	  # Zero out r5, r6, r7
	  sub $r5, $r5, $r5
	  sub $r6, $r6, $r6
	  sub $r7, $r7, $r7

	  addi $r2, $r2, 2
	  j loop
	  NOP

else: sub $r5, $r5, $r5
	  sub $r7, $r7, $r7
      NOP
	  NOP
   	  NOP
	
	  addi $r7, $r7, 31
	  sll $r7, $r7, 3
	  addi $r7, $r7, 7  # == 0x00ff
	  NOP
	  NOP
	  NOP
	  sw $r7, 0($r2)
		
	  # Zero out r5, r6, r7
	  sub $r5, $r5, $r5
	  sub $r6, $r6, $r6
	  sub $r7, $r7, $r7

	  addi $r2, $r2, 2
	  j loop
	  NOP

end: j end
